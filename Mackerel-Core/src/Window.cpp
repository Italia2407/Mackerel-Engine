#include "Window.h"

#include "LoggingSystem.h"

#include <iostream>
#include <glad/glad.h>
#include "GLFW/glfw3.h"

#include "imgui.h"
#include "backends/imgui_impl_opengl3.h"
#include "backends/imgui_impl_glfw.h"

#include <Eigen/Dense.h>
#include <vector>
#include <list>
#include "Entity.h"
#include "Scene.h"

#include "Input.h"

void InputCallbackTest(MCK::Key key, MCK::KeyEvent keyEvent)
{
    std::string message = "Key [" + std::to_string(static_cast<int>(key)) + "] did action [" + std::to_string(static_cast<int>(keyEvent)) + "].";
    MCK::Logger::log(message, MCK::Logger::LogLevel::Debug, std::source_location::current());
}

void SayHello()
{
    MCK::EntitySystem::Scene scene;
    scene.Deserialise(scene.TestSceneJson());

	// Initialise GLFW
    if (!glfwInit())
    {
        return;
    }

    // intialize logging system
    MCK::Logger::initialize();

    //Initial system start message
    MCK::Logger::log("System Starting", MCK::Logger::LogLevel::Basic, std::source_location::current());

	GLFWwindow* window = glfwCreateWindow(1280, 720, "Test", nullptr, nullptr);

    // Begin input demo

        // Setup a key callback
    std::function<void(MCK::Key, MCK::KeyEvent)> exampleCallback = InputCallbackTest;

        // Create an input subscription receipt ptr (alternatively a receipt can
        //     generated by a subscribe function where the 'receipt' argument is
        //     excluded. Note it is the user's responsibility delete those too!)
    MCK::Input::InputSubReceipt* receipt = new MCK::Input::InputSubReceipt();

        // These keys will print a message when pressed, released, or held
    MCK::Input::Subscribe(MCK::Key::__W, MCK::KeyEvent::All, exampleCallback, receipt);
    MCK::Input::Subscribe(MCK::Key::__A, MCK::KeyEvent::All, exampleCallback, receipt);
    MCK::Input::Subscribe(MCK::Key::__S, MCK::KeyEvent::All, exampleCallback, receipt);
    MCK::Input::Subscribe(MCK::Key::__D, MCK::KeyEvent::All, exampleCallback, receipt);

        // This key will print a message only when pressed
    MCK::Input::Subscribe(MCK::Key::__E, MCK::KeyEvent::Pressed, exampleCallback, receipt);

        // This key will print a message only when released
    MCK::Input::Subscribe(MCK::Key::__Q, MCK::KeyEvent::Released, exampleCallback, receipt);

        // This key will print a message only when held
    MCK::Input::Subscribe(MCK::Key::__R, MCK::KeyEvent::Held, exampleCallback, receipt);

    // End input demo

    // Make Window Current & Load GLAD
    glfwMakeContextCurrent(window);
    gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);

    glClearColor(0.5f, 0.5f, 1.0f, 1.0f);

    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO();
    // Setup Platform/Renderer bindings
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init("#version 460");
    // Setup Dear ImGui style
    ImGui::StyleColorsClassic();
    ImGui::GetStyle().WindowRounding = 8.0f;

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        //Input System
        MCK::Input::Update(window);

        //ImGui
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

        ImGui::ShowDemoWindow();
        ImGui::Begin("Test");
        ImGui::End();

        ImGui::Render();
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glfwTerminate();

    // All input subscriptions need a matching unsubscribe call
    MCK::Input::Unsubscribe(receipt);

    Eigen::Vector3<float> vecA(12.0f, 13.0f, 4.0f);
    Eigen::Vector3<float> vecB(2.0f, 42.0f, 10.0f);

    std::stringstream ss;
    ss << "Hello World! " << "Dot Result = " << vecA.dot(vecB);
    MCK::Logger::log(ss.str(), MCK::Logger::LogLevel::Basic, std::source_location::current());
}